{"version":3,"sources":["firebase.js","components/SidebarChats.js","components/StateProvider.js","components/Sidebar.js","components/chat.js","components/reducer.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","auth","provider","GoogleAuthProvider","storage","SidebarChat","addNewChat","id","name","useState","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","to","className","Avatar","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","left","state","setState","unsubscribe","toggleDrawer","anchor","open","event","type","key","src","photoURL","IconButton","Fragment","onClick","Drawer","onClose","TextField","color","label","Button","variant","inpField_content","document","getElementById","add","buttonClickHandler","placeholder","room","useStyles","makeStyles","theme","root","margin","spacing","input","display","Chat","setInput","roomId","useParams","roomName","setRoomName","classes","Date","length","timestamp","toDate","toUTCString","accept","htmlFor","aria-label","component","displayName","onChange","e","target","preventDefault","FieldValue","serverTimestamp","actionTypes","action","Login","dispatch","Container","maxWidth","Typography","style","backgroundColor","marginTop","height","borderRadius","fontSize","signInWithPopup","then","result","catch","alert","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.bf863a2d.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBWVcfeJM5UsKFM2z3eYR7EY-fRYZx0XTY\",\r\n  authDomain: \"messaging-app-backend-c39d2.firebaseapp.com\",\r\n  databaseURL: \"https://messaging-app-backend-c39d2.firebaseio.com\",\r\n  projectId: \"messaging-app-backend-c39d2\",\r\n  storageBucket: \"messaging-app-backend-c39d2.appspot.com\",\r\n  messagingSenderId: \"424847355048\",\r\n  appId: \"1:424847355048:web:6218fba35a65106349a69d\",\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nconst storage = firebase.storage();\r\n\r\nexport { auth, provider, storage };\r\nexport default db;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport db from \"../firebase\";\r\nimport \"./SidebarChat.css\";\r\n\r\nconst SidebarChat = ({ addNewChat, id, name }) => {\r\n  const [messages, setMessages] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      db.collection(\"rooms\")\r\n        .doc(id)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"desc\")\r\n        .onSnapshot((snapshot) =>\r\n          setMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n  }, [id]);\r\n\r\n  return !addNewChat ? (\r\n    <NavLink to={`/rooms/${id}`}>\r\n      <div className=\"sidebarChat\">\r\n        <Avatar />\r\n        <div className=\"sidebarChat__info\">\r\n          <h3 className=\"sidebarChat__roomname\">{name}</h3>\r\n          <p className=\"sidebarChat__lastmessage\">{messages[0]?.message}</p>\r\n        </div>\r\n      </div>\r\n    </NavLink>\r\n  ) : null;\r\n};\r\n\r\nexport default SidebarChat;\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Avatar,\r\n  IconButton,\r\n  Drawer,\r\n  Button,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport DonutlargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SearchOutlined from \"@material-ui/icons/SearchOutlined\";\r\n\r\nimport SidebarChat from \"./SidebarChats\";\r\nimport \"./Sidebar.css\";\r\nimport db from \"../firebase\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nconst Sidebar = () => {\r\n  const [rooms, setRooms] = useState([]);\r\n  const [{ user }] = useStateValue();\r\n  const [state, setState] = useState({\r\n    left: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = db.collection(\"rooms\").onSnapshot((snapshot) =>\r\n      setRooms(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          data: doc.data(),\r\n        }))\r\n      )\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    if (\r\n      event.type === \"keydown\" &&\r\n      (event.key === \"Tab\" || event.key === \"Shift\")\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n  const buttonClickHandler = () => {\r\n    let inpField_content = document.getElementById(\"standard-basic\").value;\r\n    if (inpField_content) {\r\n      db.collection(\"rooms\").add({\r\n        name: inpField_content,\r\n      });\r\n    }\r\n    setState({ ...state, [\"left\"]: false });\r\n  };\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__header\">\r\n        <div className=\"sidebar__headeravatar\">\r\n          <Avatar src={user?.photoURL} />\r\n        </div>\r\n        <div className=\"sidebar__headerRight\">\r\n          <IconButton>\r\n            <DonutlargeIcon />\r\n          </IconButton>\r\n          <React.Fragment key={\"left\"}>\r\n            <IconButton onClick={toggleDrawer(\"left\", true)}>\r\n              <ChatIcon />\r\n            </IconButton>\r\n            <Drawer\r\n              anchor={\"left\"}\r\n              open={state[\"left\"]}\r\n              onClose={toggleDrawer(\"left\", false)}\r\n              className=\"sidebar__toggleMenuDrawer\"\r\n            >\r\n              <div className=\"sidebar__toggleMenuText\">\r\n                <h2>New Rooms</h2>\r\n              </div>\r\n              <div className=\"sidebar__toggleMenuInput\">\r\n                <TextField\r\n                  id=\"standard-basic\"\r\n                  color=\"#ededed\"\r\n                  label=\"Enter room name\"\r\n                />\r\n                <div className=\"sidebar__toggleMenuButton\">\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    onClick={() => buttonClickHandler()}\r\n                  >\r\n                    Create\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </Drawer>\r\n          </React.Fragment>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sidebar__search\">\r\n        <div className=\"sidebar__searchContainer\">\r\n          <SearchOutlined />\r\n          <input type=\"text\" placeholder=\"Search or start new chat\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sidebar__chats\">\r\n        <SidebarChat addNewChat />\r\n        {rooms.map((room) => (\r\n          <SidebarChat key={room.id} id={room.id} name={room.data.name} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport AttachFile from \"@material-ui/icons/AttachFile\";\r\nimport SearchOutlined from \"@material-ui/icons/SearchOutlined\";\r\nimport MoreVert from \"@material-ui/icons/MoreVert\";\r\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport firebase from \"firebase\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport \"./chat.css\";\r\nimport db from \"../firebase\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n}));\r\n\r\nconst Chat = () => {\r\n  const [input, setInput] = useState(\"\");\r\n  const { roomId } = useParams();\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [{ user }] = useStateValue();\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    db.collection(\"rooms\").doc(roomId).collection(\"messages\").add({\r\n      message: input,\r\n      name: user.displayName,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n\r\n    setInput(\"\");\r\n  };\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (roomId) {\r\n      db.collection(\"rooms\")\r\n        .doc(roomId)\r\n        .onSnapshot((snapshot) => setRoomName(snapshot.data().name));\r\n\r\n      db.collection(\"rooms\")\r\n        .doc(roomId)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"asc\")\r\n        .onSnapshot((snapshot) =>\r\n          setMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n  }, [roomId]);\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chat__header\">\r\n        <Avatar />\r\n        <div className=\"chat__headerInfo\">\r\n          <h2>{roomName}</h2>\r\n          <p>\r\n            last seen{\" \"}\r\n            {new Date(\r\n              messages[messages.length - 1]?.timestamp?.toDate()\r\n            ).toUTCString()}\r\n          </p>\r\n        </div>\r\n        <div className=\"chat__headerRight\">\r\n          <IconButton>\r\n            <SearchOutlined />\r\n          </IconButton>\r\n          <div className={classes.root}>\r\n            <input\r\n              accept=\"image/*\"\r\n              className={classes.input}\r\n              id=\"icon-button-file\"\r\n              type=\"file\"\r\n            />\r\n            <label htmlFor=\"icon-button-file\">\r\n              <IconButton\r\n                color=\"primary\"\r\n                aria-label=\"upload picture\"\r\n                component=\"span\"\r\n              >\r\n                <AttachFile color=\"default\" />\r\n              </IconButton>\r\n            </label>\r\n          </div>\r\n          <IconButton>\r\n            <MoreVert />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"chat__body\">\r\n        {messages.map((message) => (\r\n          <p\r\n            className={`chat__message ${\r\n              message.name === user.displayName && \"chat__receiver\"\r\n            }`}\r\n          >\r\n            <span className=\"chat__name\">{message.name}</span>\r\n            {message.message}\r\n            <span className=\"chat__timestamp\">\r\n              {new Date(message.timestamp?.toDate()).toUTCString()}\r\n            </span>\r\n          </p>\r\n        ))}\r\n      </div>\r\n      <div className=\"chat__footer\">\r\n        <InsertEmoticonIcon />\r\n        <form>\r\n          <input\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            type=\"text\"\r\n            placeholder=\"Type a message\"\r\n          />\r\n          <button type=\"submit\" onClick={sendMessage}>\r\n            Send a message\r\n          </button>\r\n        </form>\r\n        <MicIcon />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","export const initialState = {\r\n  user: null,\r\n};\r\n\r\nexport const actionTypes = { SET_USER: \"SET_USER\" };\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_USER:\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\r\n\r\nimport \"./Login.css\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { auth, provider } from \"../firebase\";\r\nimport { actionTypes } from \"./reducer\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport ForumTwoToneIcon from \"@material-ui/icons/ForumTwoTone\";\r\n\r\nconst Login = () => {\r\n  const [{}, dispatch] = useStateValue();\r\n\r\n  const signIn = () => {\r\n    auth\r\n      .signInWithPopup(provider)\r\n      .then((result) => {\r\n        dispatch({\r\n          type: actionTypes.SET_USER,\r\n          user: result.user,\r\n        });\r\n      })\r\n      .catch((e) => alert(e.message));\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\">\r\n      <Typography\r\n        component=\"div\"\r\n        style={{\r\n          backgroundColor: \"#ffffff\",\r\n          marginTop: \"15vh\",\r\n          height: \"50vh\",\r\n          borderRadius: \"2%\",\r\n        }}\r\n      >\r\n        <div className=\"login\">\r\n          <div className=\"login__container\">\r\n            <ForumTwoToneIcon fontSize=\"large\" />\r\n            <div className=\"login__text\">\r\n              <h2>Sign in to Messaging App</h2>\r\n            </div>\r\n            <Button onClick={signIn}>Sign In With Google</Button>\r\n          </div>\r\n        </div>\r\n      </Typography>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport Sidebar from \"./components/Sidebar\";\nimport Chat from \"./components/chat\";\nimport Login from \"./components/Login\";\nimport { useStateValue } from \"./components/StateProvider\";\n\nfunction App() {\n  const [{ user }] = useStateValue();\n\n  return (\n    <div className=\"App\">\n      {!user ? (\n        <Login />\n      ) : (\n        <div className=\"app__body\">\n          <BrowserRouter>\n            <Sidebar />\n            <Switch>\n              <Route path=\"/rooms/:roomId\">\n                <Chat />\n              </Route>\n              <Route exact path=\"/\">\n                <div className=\"homepage__background\" />\n              </Route>\n            </Switch>\n          </BrowserRouter>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StateProvider } from \"./components/StateProvider\";\n\nimport reducer, { initialState } from \"./components/reducer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}